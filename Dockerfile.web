# Stage 1: Build the Flutter web application
FROM cirrusci/flutter:stable as builder
# Or: FROM heydu/flutter:latest as builder

# Create a non-root user for the build (optional but good practice)
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app

# Copy application source
COPY --chown=appuser:appuser . .

# Build the Flutter web application
RUN flutter build web --release

# Stage 2: Serve the Flutter web application with Nginx
FROM nginx:alpine

# Copy custom Nginx configuration
COPY config/nginx/nginx-webapp-internal.conf /etc/nginx/conf.d/default.conf

# Copy the Flutter web build from the builder stage
COPY --from=builder /app/build/web /usr/share/nginx/html

# Create nginx user/group (if not already present in nginx:alpine, though it usually is)
# Ensure nginx user owns the web files and Nginx-related directories
RUN \
    addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Expose ports
EXPOSE 80 443

# Start Nginx
CMD ["nginx", "-g", "daemon off;"] 
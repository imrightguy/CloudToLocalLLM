# =============================================================================
# Stage 1: Flutter Base Image (Cached Layer)
# This stage creates a reusable base with Flutter SDK pre-installed
# =============================================================================
FROM debian:bullseye-slim AS flutter-base

# Install system dependencies (cached layer)
RUN apt-get update && apt-get install -y \
    curl \
    git \
    unzip \
    xz-utils \
    zip \
    libglu1-mesa \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user (cached layer)
RUN groupadd -r fluttergroup && useradd -r -g fluttergroup -m -s /sbin/nologin flutteruser

# Download and install Flutter SDK (cached layer - only rebuilds when Flutter version changes)
ARG FLUTTER_VERSION=3.24.5
RUN curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz \
    && tar xf flutter_linux_${FLUTTER_VERSION}-stable.tar.xz -C / \
    && rm flutter_linux_${FLUTTER_VERSION}-stable.tar.xz

# Set Flutter permissions and configure git (cached layer)
RUN chown -R flutteruser:fluttergroup /flutter \
    && git config --global --add safe.directory /flutter

# Switch to non-root user and configure Flutter (cached layer)
USER flutteruser
RUN git config --global --add safe.directory /flutter

# Pre-warm Flutter (cached layer - only rebuilds when Flutter version changes)
RUN /flutter/bin/flutter --version \
    && /flutter/bin/flutter doctor \
    && /flutter/bin/flutter precache --web

# =============================================================================
# Stage 2: Dependencies (Cached when pubspec files don't change)
# =============================================================================
FROM flutter-base AS dependencies

WORKDIR /app
USER root
RUN chown -R flutteruser:fluttergroup /app
USER flutteruser

# Copy dependency files first (triggers rebuild only when dependencies change)
COPY --chown=flutteruser:fluttergroup pubspec.yaml pubspec.lock ./

# Install Flutter dependencies (cached layer - only rebuilds when pubspec changes)
RUN /flutter/bin/flutter pub get

# =============================================================================
# Stage 3: Build Application (Rebuilds only when source code changes)
# =============================================================================
FROM dependencies AS build

# Copy source code (this layer rebuilds when code changes)
COPY --chown=flutteruser:fluttergroup . .

# Build the Flutter web application (rebuilds only when code changes)
RUN /flutter/bin/flutter build web --release --no-tree-shake-icons

# =============================================================================
# Stage 4: Production Nginx Server (Optimized)
# =============================================================================
FROM nginx:alpine AS production

# Install curl for healthcheck (cached layer)
RUN apk add --no-cache curl

# Create nginx user with specific UID/GID (cached layer)
RUN adduser -D -H -u 101 -s /sbin/nologin nginx || true

# Create necessary directories for Nginx (cached layer)
RUN mkdir -p \
    /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp \
    /tmp/nginx \
    /etc/letsencrypt/live/cloudtolocalllm.online && \
    chown -R nginx:nginx /var/cache/nginx /tmp/nginx /etc/letsencrypt && \
    chmod -R 700 /var/cache/nginx && \
    chmod -R 755 /tmp/nginx

# Copy Nginx configuration (cached layer - rebuilds only when config changes)
COPY config/nginx/nginx-webapp-internal.conf /etc/nginx/conf.d/default.conf
RUN chown -R nginx:nginx /etc/nginx/conf.d && \
    chmod -R 755 /etc/nginx/conf.d

# Copy the built Flutter web app (rebuilds only when app code changes)
COPY --from=build /app/build/web /usr/share/nginx/html
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Expose ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]
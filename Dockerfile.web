# Stage 1: Build the Flutter web application
FROM cirrusci/flutter:stable as builder

# Configure git safe directory system-wide (as root)
RUN git config --system --add safe.directory /sdks/flutter

# Explicitly create the flutter user and group.
RUN addgroup --gid 1000 flutter && \
    adduser --uid 1000 --gid 1000 --disabled-password --gecos "" flutter && \
    usermod -aG sudo flutter && \
    echo "flutter ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Fix permissions for the Flutter SDK cache directory
RUN chown -R flutter:flutter /sdks/flutter/bin/cache

# Switch to the flutter user for subsequent commands
USER flutter
WORKDIR /home/flutter/project

# Copy application source. After this, files are owned by flutter due to USER context.
COPY . .
# No chown needed here if COPY respects USER. If not, we'll adjust.

# Build the Flutter web application
RUN flutter build web --release

# Stage 2: Serve the Flutter web application with Nginx
FROM nginx:alpine

# Copy custom Nginx configuration
COPY config/nginx/nginx-webapp-internal.conf /etc/nginx/conf.d/default.conf

# Copy the Flutter web build from the builder stage
COPY --from=builder /home/flutter/project/build/web /usr/share/nginx/html

# Nginx user setup (nginx:alpine usually has an 'nginx' user)
# Ensure nginx user owns the web files and Nginx-related directories
RUN \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Expose ports
EXPOSE 80 443

# Start Nginx
CMD ["nginx", "-g", "daemon off;"] 
#!/bin/bash

# Script to migrate Android embedding from V1 to V2
# Created to fix device_info_plus compatibility

echo "[SETUP] Migrating Android embedding to V2..."

# Change to the Android app directory
cd /opt/cloudtolocalllm/android/app

# Update MainActivity.java
if [ -f "src/main/java/com/example/cloudtolocalllm/MainActivity.java" ]; then
  echo "[SETUP] Updating MainActivity.java"
  cat > src/main/java/com/example/cloudtolocalllm/MainActivity.java << 'EOF'
package com.example.cloudtolocalllm;

import io.flutter.embedding.android.FlutterActivity;

public class MainActivity extends FlutterActivity {
}
EOF
fi

# Update build.gradle
if [ -f "build.gradle" ]; then
  echo "[SETUP] Updating build.gradle"
  sed -i '/flutterEmbedding/d' build.gradle
  sed -i '/dependencies {/a \\    implementation "androidx.annotation:annotation:1.7.1"' build.gradle
  sed -i '/dependencies {/a \\    implementation "androidx.core:core:1.12.0"' build.gradle  
  sed -i '/dependencies {/a \\    implementation "androidx.lifecycle:lifecycle-common-java8:2.7.0"' build.gradle
  sed -i '/dependencies {/a \\    implementation "androidx.lifecycle:lifecycle-runtime:2.7.0"' build.gradle
  sed -i '/dependencies {/a \\    implementation "io.flutter:flutter_embedding_release:1.0.0-000000000000000000000000000000000000000000"' build.gradle
fi

# Create a new plugin registrant
mkdir -p src/main/java/io/flutter/plugins
cat > src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java << 'EOF'
package io.flutter.plugins;

import androidx.annotation.Keep;
import androidx.annotation.NonNull;
import io.flutter.Log;

import io.flutter.embedding.engine.FlutterEngine;

/**
 * Generated file. Do not edit.
 * This file is generated by the Flutter tool based on the
 * plugins that support the Android platform.
 */
@Keep
public final class GeneratedPluginRegistrant {
  private static final String TAG = "GeneratedPluginRegistrant";
  public static void registerWith(@NonNull FlutterEngine flutterEngine) {
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.deviceinfo.DeviceInfoPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin device_info_plus, io.flutter.plugins.deviceinfo.DeviceInfoPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.it_nomads.fluttersecurestorage.FlutterSecureStoragePlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin flutter_secure_storage, com.it_nomads.fluttersecurestorage.FlutterSecureStoragePlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.packageinfo.PackageInfoPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin package_info_plus, io.flutter.plugins.packageinfo.PackageInfoPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.pathprovider.PathProviderPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin path_provider_android, io.flutter.plugins.pathprovider.PathProviderPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin shared_preferences_android, io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.urllauncher.UrlLauncherPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin url_launcher_android, io.flutter.plugins.urllauncher.UrlLauncherPlugin", e);
    }
  }
}
EOF

# Create App.kt file for new Flutter embedding
mkdir -p src/main/kotlin/com/example/cloudtolocalllm
cat > src/main/kotlin/com/example/cloudtolocalllm/App.kt << 'EOF'
package com.example.cloudtolocalllm

import io.flutter.app.FlutterApplication
import io.flutter.plugin.common.PluginRegistry
import io.flutter.plugin.common.PluginRegistry.PluginRegistrantCallback
import io.flutter.plugins.GeneratedPluginRegistrant

class App : FlutterApplication(), PluginRegistrantCallback {
  override fun onCreate() {
    super.onCreate()
  }

  override fun registerWith(registry: PluginRegistry) {
    // Manual plugin registration using the generated registrant if needed
  }
}
EOF

# Update AndroidManifest.xml
if [ -f "src/main/AndroidManifest.xml" ]; then
  echo "[SETUP] Updating AndroidManifest.xml"
  sed -i 's/android:name="io.flutter.app.FlutterApplication"/android:name="${applicationName}"/' src/main/AndroidManifest.xml
  sed -i '/<manifest/a \\    xmlns:tools="http://schemas.android.com/tools"' src/main/AndroidManifest.xml
  sed -i '/<\/application>/i \\        <meta-data android:name="flutterEmbedding" android:value="2" />' src/main/AndroidManifest.xml
fi

echo "[SETUP] Android embedding migration completed" 
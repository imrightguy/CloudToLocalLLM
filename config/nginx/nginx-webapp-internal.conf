    # Add WebAssembly MIME type if not already in mime.types
    types {
        application/wasm wasm;
    }

    # log_format main '$remote_addr - $remote_user [$time_local] "$request" '$status $body_bytes_sent "$http_referer" '$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval' 'wasm-unsafe-eval'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always; # Ensure HSTS is appropriate for your setup

    # DNS resolution for proxy_pass with variables or service discovery
    resolver 127.0.0.11 valid=30s; # Docker's embedded DNS server
    resolver_timeout 10s;

    server {
        listen 80 default_server;
        server_name cloudtolocalllm.online www.cloudtolocalllm.online app.cloudtolocalllm.online;

        # Handle Let's Encrypt ACME challenge
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/certbot; # Certbot will place files here
            default_type "text/plain";
            try_files $uri =404;
        }

        # Internal health check for webapp itself (optional, adjust path if needed)
        location = /health_internal {
            return 200 'OK_WEBAPP_INTERNAL';
            add_header Content-Type text/plain;
        }
        
        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl default_server;
        server_name cloudtolocalllm.online www.cloudtolocalllm.online app.cloudtolocalllm.online;

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/cloudtolocalllm.online/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/cloudtolocalllm.online/privkey.pem;
        # Fallback self-signed certs (optional, for initial startup before Let's Encrypt runs)
        # ssl_certificate /etc/nginx/ssl/selfsigned.crt; 
        # ssl_certificate_key /etc/nginx/ssl/selfsigned.key;

        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Root for the Flutter web application
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Proxy pass requests to FusionAuth (running on port 9011)
        location /auth/ {
            proxy_pass http://cloudtolocalllm-fusionauth-app:9011/; # Service name from docker-compose
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        # Handle SPA routing for the Flutter app
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # Internal health check accessible via the container's direct IP/port if needed for Docker healthcheck
        # This is distinct from the public /health which is gone with the external nginx.
        # You might want a public /health on the main domain, then it should be handled by the Flutter app
        # or a specific location block here.
        # For now, using the /health_internal on port 80.
    }

# Server block for auth.cloudtolocalllm.online - HTTP to HTTPS redirect
server {
    listen 80;
    server_name auth.cloudtolocalllm.online;

    # Handle Let's Encrypt ACME challenge (if needed for this specific subdomain, though wildcard might cover)
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        default_type "text/plain";
        try_files $uri =404;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# Server block for auth.cloudtolocalllm.online - HTTPS proxy to FusionAuth
server {
    listen 443 ssl;
    server_name auth.cloudtolocalllm.online;

    # SSL configuration (uses the same cert as the main site for now, will be updated by Certbot)
    ssl_certificate /etc/letsencrypt/live/cloudtolocalllm.online/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloudtolocalllm.online/privkey.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m; # Consider a different cache name if needed, e.g., SSL_AUTH:50m
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Proxy pass all requests to FusionAuth
    location / {
        proxy_pass http://cloudtolocalllm-fusionauth-app:9011/; # Service name from docker-compose
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }
} 
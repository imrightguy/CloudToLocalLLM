# Maintainer: Christopher Maltais <christopher.maltais@gmail.com>
#
# Pre-built binary package - NO Flutter dependency required!
# This package downloads a pre-built CloudToLocalLLM binary, so users
# don't need to install Flutter or any build dependencies.
#
pkgname=cloudtolocalllm
pkgver=3.0.1
pkgrel=1
pkgdesc="Multi-tenant streaming LLM management with system tray integration (GitHub split binary)"
arch=('x86_64')
url="https://github.com/imrightguy/CloudToLocalLLM"
license=('MIT')
depends=(
    'libayatana-appindicator'
    'gtk3'
    'glib2'
    'cairo'
    'pango'
    'gdk-pixbuf2'
    'atk'
    'at-spi2-atk'
    'dbus'
    'xdg-utils'
    'hicolor-icon-theme'
    'python'  # For tray daemon
    'wmctrl'  # For window management
)
makedepends=()
optdepends=(
    'ollama: Local LLM server for direct desktop connectivity'
    'firefox: Web browser for authentication flow'
    'chromium: Alternative web browser for authentication'
)
provides=('cloudtolocalllm')
conflicts=('cloudtolocalllm-git')
install=cloudtolocalllm.install

# GitHub repository for split binary files
_github_repo="imrightguy/CloudToLocalLLM"
_github_base="https://raw.githubusercontent.com/${_github_repo}/master/dist"

source=(
    "https://github.com/imrightguy/CloudToLocalLLM/archive/v$pkgver.tar.gz"
    "${_github_base}/cloudtolocalllm-${pkgver}-x86_64.tar.gz.partaa"
    "${_github_base}/cloudtolocalllm-${pkgver}-x86_64.tar.gz.partab"
    "${_github_base}/cloudtolocalllm-${pkgver}-x86_64.tar.gz.partac"
    "${_github_base}/binary_checksums.txt"
)
sha256sums=(
    'SKIP'  # Source archive checksum
    'SKIP'  # cloudtolocalllm-3.0.1-x86_64.tar.gz.partaa
    'SKIP'  # cloudtolocalllm-3.0.1-x86_64.tar.gz.partab
    'SKIP'  # cloudtolocalllm-3.0.1-x86_64.tar.gz.partac
    'SKIP'  # binary_checksums.txt
)

prepare() {
    cd "$srcdir"

    msg "Reassembling split binary files from GitHub..."

    # Reassemble the main package from split parts
    local package_file="cloudtolocalllm-${pkgver}-x86_64.tar.gz"

    # Check if all parts are present
    local parts=(
        "cloudtolocalllm-${pkgver}-x86_64.tar.gz.partaa"
        "cloudtolocalllm-${pkgver}-x86_64.tar.gz.partab"
        "cloudtolocalllm-${pkgver}-x86_64.tar.gz.partac"
    )

    for part in "${parts[@]}"; do
        if [[ ! -f "$part" ]]; then
            error "Missing split part: $part"
            return 1
        fi
    done

    # Reassemble the package
    msg "Combining split parts into $package_file..."
    cat "${parts[@]}" > "$package_file"

    # Verify the reassembled file
    if [[ ! -f "$package_file" ]]; then
        error "Failed to reassemble $package_file"
        return 1
    fi

    # Verify checksum if available
    if [[ -f "binary_checksums.txt" ]]; then
        local expected_checksum
        expected_checksum=$(grep "$package_file.*original" binary_checksums.txt | cut -d' ' -f1 || echo "")

        if [[ -n "$expected_checksum" ]]; then
            local actual_checksum
            actual_checksum=$(sha256sum "$package_file" | cut -d' ' -f1)

            if [[ "$expected_checksum" == "$actual_checksum" ]]; then
                msg "Checksum verification passed for $package_file"
            else
                error "Checksum verification failed for $package_file"
                error "Expected: $expected_checksum"
                error "Actual:   $actual_checksum"
                return 1
            fi
        else
            warning "No checksum found for verification"
        fi
    fi

    # Extract the reassembled package
    msg "Extracting $package_file..."
    tar -xzf "$package_file" || {
        error "Failed to extract binary package"
        return 1
    }

    # Verify extraction
    local extracted_dir="cloudtolocalllm-${pkgver}-x86_64"
    if [[ ! -d "$extracted_dir" ]]; then
        error "Failed to extract package or unexpected directory structure"
        return 1
    fi

    msg "Package reassembly and extraction completed successfully"
}

build() {
    # No build steps required - using pre-built binary
    echo "Using pre-built binary package - no compilation needed"
}

package() {
    cd "$srcdir"

    # Install the pre-built binary to /usr/share/cloudtolocalllm
    install -dm755 "$pkgdir/usr/share/cloudtolocalllm"

    # Copy the pre-built application files from the extracted binary package
    local binary_dir="cloudtolocalllm-$pkgver-x86_64"
    if [[ -d "$binary_dir" ]]; then
        cd "$binary_dir"
        if [[ -f "cloudtolocalllm" && -d "data" && -d "lib" ]]; then
            cp -r cloudtolocalllm data lib "$pkgdir/usr/share/cloudtolocalllm/"
        else
            echo "Error: Pre-built binary files not found in $binary_dir"
            echo "Expected: cloudtolocalllm binary, data/, lib/ directories"
            ls -la
            exit 1
        fi

        # Make the binary executable
        chmod +x "$pkgdir/usr/share/cloudtolocalllm/cloudtolocalllm"

        # Install tray daemon
        if [[ -f "cloudtolocalllm-tray" ]]; then
            install -Dm755 "cloudtolocalllm-tray" "$pkgdir/usr/bin/cloudtolocalllm-tray"
        else
            echo "Warning: Tray daemon binary not found in pre-built package"
        fi
        cd "$srcdir"
    else
        echo "Error: Binary package directory not found: $binary_dir"
        echo "Available directories:"
        ls -la
        exit 1
    fi

    # Create wrapper script in /usr/bin
    install -dm755 "$pkgdir/usr/bin"
    cat > "$pkgdir/usr/bin/cloudtolocalllm" << 'EOF'
#!/bin/bash
# CloudToLocalLLM wrapper script with robust system tray integration
# System tray is enabled by default with proper error handling
# To disable system tray for debugging, run: DISABLE_SYSTEM_TRAY=true cloudtolocalllm

cd /usr/share/cloudtolocalllm

# Enable debug logging for system tray issues if requested
if [[ "${DEBUG_SYSTEM_TRAY}" == "true" ]]; then
    export G_MESSAGES_DEBUG=all
    echo "Debug mode enabled for system tray troubleshooting"
fi

# Check for system tray support
if [[ "${DISABLE_SYSTEM_TRAY}" != "true" ]]; then
    # Verify desktop environment supports system tray
    if [[ -z "$XDG_CURRENT_DESKTOP" ]]; then
        echo "Warning: XDG_CURRENT_DESKTOP not set, system tray may not work properly"
    fi

    # Check for required libraries
    if ! ldconfig -p | grep -q libayatana-appindicator; then
        echo "Warning: libayatana-appindicator not found, system tray may not work"
    fi
fi

exec ./cloudtolocalllm "$@"
EOF
    chmod +x "$pkgdir/usr/bin/cloudtolocalllm"

    # Install desktop entry and other files from source
    cd "$srcdir/CloudToLocalLLM-$pkgver"
    install -Dm644 "aur-package/cloudtolocalllm.desktop" \
        "$pkgdir/usr/share/applications/cloudtolocalllm.desktop"

    # Install application icons for desktop integration
    # Use the main app icon for pixmaps (fallback icon)
    install -Dm644 "assets/images/app_icon.png" \
        "$pkgdir/usr/share/pixmaps/cloudtolocalllm.png"

    # Install the main app icon for hicolor theme (most common size)
    install -Dm644 "assets/images/app_icon.png" \
        "$pkgdir/usr/share/icons/hicolor/48x48/apps/cloudtolocalllm.png"

    # Install documentation
    install -Dm644 "README.md" "$pkgdir/usr/share/doc/$pkgname/README.md"
    if [[ -f "CHANGELOG.md" ]]; then
        install -Dm644 "CHANGELOG.md" "$pkgdir/usr/share/doc/$pkgname/CHANGELOG.md"
    fi

    # Install license
    install -Dm644 "LICENSE" "$pkgdir/usr/share/licenses/$pkgname/LICENSE"

    # Install man page if it exists
    if [[ -f "docs/cloudtolocalllm.1" ]]; then
        install -Dm644 "docs/cloudtolocalllm.1" "$pkgdir/usr/share/man/man1/cloudtolocalllm.1"
        gzip -9 "$pkgdir/usr/share/man/man1/cloudtolocalllm.1"
    fi
}

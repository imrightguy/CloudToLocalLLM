# Maintainer: Christopher Maltais <christopher.maltais@gmail.com>
#
# Pre-built binary package - NO Flutter dependency required!
# This package downloads a pre-built CloudToLocalLLM binary, so users
# don't need to install Flutter or any build dependencies.
#
pkgname=cloudtolocalllm
pkgver=2.1.1
pkgrel=5
pkgdesc="Multi-tenant streaming LLM management with system tray integration (pre-built binary)"
arch=('x86_64')
url="https://github.com/imrightguy/CloudToLocalLLM"
license=('MIT')
depends=(
    'libayatana-appindicator'
    'gtk3'
    'glib2'
    'cairo'
    'pango'
    'gdk-pixbuf2'
    'atk'
    'at-spi2-atk'
    'dbus'
    'xdg-utils'
    'hicolor-icon-theme'
)
makedepends=(
    'imagemagick'
)
optdepends=(
    'ollama: Local LLM server for direct desktop connectivity'
    'firefox: Web browser for authentication flow'
    'chromium: Alternative web browser for authentication'
)
provides=('cloudtolocalllm')
conflicts=('cloudtolocalllm-git')
install=cloudtolocalllm.install
source=(
    "https://github.com/imrightguy/CloudToLocalLLM/archive/v$pkgver.tar.gz"
    "cloudtolocalllm-$pkgver-x86_64.tar.gz::https://cloudtolocalllm.online/cloudtolocalllm-$pkgver-x86_64.tar.gz"
)
sha256sums=(
    'SKIP'  # Source archive checksum
    'SKIP'  # Binary package checksum
)

prepare() {
    cd "$srcdir"

    # Extract the pre-built binary package
    if [[ -f "cloudtolocalllm-$pkgver-x86_64.tar.gz" ]]; then
        echo "Extracting pre-built binary package..."
        tar -xzf "cloudtolocalllm-$pkgver-x86_64.tar.gz" || {
            echo "Error: Failed to extract binary package"
            exit 1
        }
    else
        echo "Error: Pre-built binary package not found"
        exit 1
    fi

    echo "Pre-built binary package extracted successfully"
}

build() {
    cd "$srcdir/CloudToLocalLLM-$pkgver"

    # Generate icons from source assets for proper system integration
    mkdir -p linux/icons

    # Use monochrome tray icons if available, otherwise generate from app icon
    if [[ -f "assets/images/tray_icon_contrast_32.png" ]]; then
        echo "Using existing monochrome tray icons..."
        # Copy existing monochrome icons
        for size in 16 24 32; do
            if [[ -f "assets/images/tray_icon_contrast_${size}.png" ]]; then
                cp "assets/images/tray_icon_contrast_${size}.png" "linux/icons/cloudtolocalllm-${size}.png"
            fi
        done

        # Generate larger sizes from the 32px monochrome icon
        if command -v magick &> /dev/null; then
            for size in 48 64 128; do
                magick "assets/images/tray_icon_contrast_32.png" -resize "${size}x${size}" "linux/icons/cloudtolocalllm-${size}.png"
            done
        elif command -v convert &> /dev/null; then
            for size in 48 64 128; do
                convert "assets/images/tray_icon_contrast_32.png" -resize "${size}x${size}" "linux/icons/cloudtolocalllm-${size}.png"
            done
        else
            echo "Warning: ImageMagick not found. Using base monochrome icon for all sizes."
            for size in 48 64 128; do
                cp "assets/images/tray_icon_contrast_32.png" "linux/icons/cloudtolocalllm-${size}.png"
            done
        fi
    else
        echo "Warning: Monochrome tray icons not found. Generating from app icon."
        # Fallback to app icon if monochrome icons are not available
        if command -v magick &> /dev/null; then
            for size in 16 24 32 48 64 128; do
                magick "assets/images/app_icon.png" -resize "${size}x${size}" "linux/icons/cloudtolocalllm-${size}.png"
            done
        elif command -v convert &> /dev/null; then
            for size in 16 24 32 48 64 128; do
                convert "assets/images/app_icon.png" -resize "${size}x${size}" "linux/icons/cloudtolocalllm-${size}.png"
            done
        else
            echo "Warning: ImageMagick not found. Using original icon for all sizes."
            for size in 16 24 32 48 64 128; do
                cp "assets/images/app_icon.png" "linux/icons/cloudtolocalllm-${size}.png"
            done
        fi
    fi

    echo "Icons prepared for system integration"
}

package() {
    cd "$srcdir"

    # Install the pre-built binary to /usr/share/cloudtolocalllm
    install -dm755 "$pkgdir/usr/share/cloudtolocalllm"

    # Copy the pre-built application files
    if [[ -d "cloudtolocalllm-$pkgver-x86_64" ]]; then
        cp -r "cloudtolocalllm-$pkgver-x86_64/"* "$pkgdir/usr/share/cloudtolocalllm/"
    else
        echo "Error: Pre-built binary directory not found"
        exit 1
    fi

    # Make the binary executable
    chmod +x "$pkgdir/usr/share/cloudtolocalllm/cloudtolocalllm"

    # Create wrapper script in /usr/bin
    install -dm755 "$pkgdir/usr/bin"
    cat > "$pkgdir/usr/bin/cloudtolocalllm" << 'EOF'
#!/bin/bash
# CloudToLocalLLM wrapper script with system tray integration
cd /usr/share/cloudtolocalllm
exec ./cloudtolocalllm "$@"
EOF
    chmod +x "$pkgdir/usr/bin/cloudtolocalllm"

    # Install desktop entry and other files from source
    cd "$srcdir/CloudToLocalLLM-$pkgver"
    install -Dm644 "aur-package/cloudtolocalllm.desktop" \
        "$pkgdir/usr/share/applications/cloudtolocalllm.desktop"

    # Install application icons in multiple sizes for better desktop integration
    # Use monochrome tray icons for better Linux compatibility
    if [[ -f "assets/images/tray_icon_contrast_32.png" ]]; then
        install -Dm644 "assets/images/tray_icon_contrast_32.png" \
            "$pkgdir/usr/share/pixmaps/cloudtolocalllm.png"
    else
        install -Dm644 "assets/images/app_icon.png" \
            "$pkgdir/usr/share/pixmaps/cloudtolocalllm.png"
    fi

    # Install hicolor icon theme icons (including 24px for system tray)
    for size in 16 24 32 48 64 128; do
        if [[ -f "linux/icons/cloudtolocalllm-${size}.png" ]]; then
            install -Dm644 "linux/icons/cloudtolocalllm-${size}.png" \
                "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/cloudtolocalllm.png"
        fi
    done

    # Install documentation
    install -Dm644 "README.md" "$pkgdir/usr/share/doc/$pkgname/README.md"
    if [[ -f "CHANGELOG.md" ]]; then
        install -Dm644 "CHANGELOG.md" "$pkgdir/usr/share/doc/$pkgname/CHANGELOG.md"
    fi

    # Install license
    install -Dm644 "LICENSE" "$pkgdir/usr/share/licenses/$pkgname/LICENSE"

    # Install man page if it exists
    if [[ -f "docs/cloudtolocalllm.1" ]]; then
        install -Dm644 "docs/cloudtolocalllm.1" "$pkgdir/usr/share/man/man1/cloudtolocalllm.1"
        gzip -9 "$pkgdir/usr/share/man/man1/cloudtolocalllm.1"
    fi
}

# Simple nginx container for serving pre-built Flutter web assets
# Flutter builds happen on the host system, not in the container

FROM nginx:alpine

# Install curl for healthcheck and openssl for self-signed certificates
RUN apk add --no-cache curl openssl

# Create nginx user with specific UID/GID for security
RUN adduser -D -H -u 101 -s /sbin/nologin nginx || true

# Create necessary directories for Nginx
RUN mkdir -p \
    /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp \
    /tmp/nginx \
    /etc/nginx/ssl \
    /etc/letsencrypt/live/cloudtolocalllm.online && \
    chown -R nginx:nginx /var/cache/nginx /tmp/nginx /etc/letsencrypt /etc/nginx/ssl && \
    chmod -R 700 /var/cache/nginx && \
    chmod -R 755 /tmp/nginx

# Copy entrypoint script
COPY config/docker/entrypoint-with-ssl-fallback.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Expose ports
EXPOSE 80 443

# Health check (run as root since nginx user might not have curl access)
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Use entrypoint script to handle SSL certificates and drop privileges
ENTRYPOINT ["/entrypoint.sh"]

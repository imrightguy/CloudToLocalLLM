x-flutter-env: &flutter-env
  FLUTTER_ROOT: /flutter
  PUB_CACHE: /flutter/.pub-cache
  FLUTTER_SUPPRESS_ANALYTICS: true
  NO_COLOR: true
  FLUTTER_NO_ROOT_WARNING: true

services:
  # Web application service
  webapp:
    build:
      context: .
      dockerfile: config/docker/Dockerfile.web
    image: cloudtolocalllm-webapp
    container_name: cloudtolocalllm-webapp
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx-webapp-internal.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./ssl:/etc/nginx/ssl
    environment:
      <<: *flutter-env
    restart: unless-stopped
    networks:
      - cloudllm-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health_internal || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      fusionauth:
        condition: service_healthy

  # Tunnel service

  # FusionAuth service
  fusionauth:
    image: fusionauth/fusionauth-app:latest
    container_name: cloudtolocalllm-fusionauth-app
    ports:
      - "9011:9011"
    environment:
      - DATABASE_URL=jdbc:postgresql://db:5432/fusionauth
      - DATABASE_ROOT_USERNAME=postgres
      - DATABASE_ROOT_PASSWORD=postgres
      - DATABASE_USERNAME=fusionauth
      - DATABASE_PASSWORD=fusionauth
      - FUSIONAUTH_APP_MEMORY=512M
      - FUSIONAUTH_APP_RUNTIME_MODE=development
      - FUSIONAUTH_APP_URL=https://auth.cloudtolocalllm.online
      - SEARCH_TYPE=database
    depends_on:
      db:
        condition: service_healthy
      postfix-mail:
        condition: service_started
    restart: unless-stopped
    networks:
      - cloudllm-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9011/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Database service
  db:
    image: postgres:13-alpine
    container_name: cloudtolocalllm-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fusionauth
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - cloudllm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fusionauth"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Postfix Mail Server for direct email sending
  # WARNING: Ensuring email deliverability with a self-hosted MTA is complex.
  # Requires proper rDNS (PTR), SPF, DKIM, DMARC, and an IP with good reputation.
  # Port 25 outbound must not be blocked by your VPS provider.
  postfix-mail:
    image: boky/postfix:latest
    container_name: cloudtolocalllm-postfix-mail
    restart: always
    environment:
      # - "TZ=Europe/Amsterdam" # Optional: Set your server's timezone
      - "HOSTNAME=mail.cloudtolocalllm.online" # The FQDN of your mail server
      - "DOMAIN=cloudtolocalllm.online" # Your main domain
      - "ALLOWED_SENDER_DOMAINS=cloudtolocalllm.online"
      - "NETWORK_INTERFACE=eth0" # Usually eth0 in Docker, verify if needed
      # Set an empty RELAYHOST to use direct sending
      - "RELAYHOST=" # Leave empty for direct sending
      # - "RELAYHOST_USERNAME=" # Not needed for direct sending
      # - "RELAYHOST_PASSWORD=" # Not needed for direct sending
      - "MYNETWORKS=127.0.0.0/8 172.16.0.0/12 192.168.0.0/16" # Allow Docker internal networks and localhost to send
      # --- DKIM Settings (Requires you to generate keys and set DNS TXT record) ---
      # Ensure this path matches the volume mount below
      - "DKIM_DOMAINS=cloudtolocalllm.online" # Your domain(s) for DKIM signing
      - "DKIM_SELECTOR=mail" # The selector you used for key generation (e.g., 'mail')
      - "DKIM_KEY_PATH=/etc/opendkim/keys/cloudtolocalllm.online/mail.private" # Path inside container
    volumes:
      # Mount your DKIM private key here. Create ./config/dkim/ directory first.
      # And place your mail.private (or selector.private) key in ./config/dkim/
      - ./config/dkim:/etc/opendkim/keys/cloudtolocalllm.online:ro 
    ports:
      - "2500:25" # Expose internal port 25 as 2500 on host (for FusionAuth to connect to postfix-mail:25)
    restart: unless-stopped
    cap_add:
      - NET_ADMIN # May be needed by some Postfix configurations or for startup scripts in the image
    networks:
      - cloudllm-network

  # Admin control daemon

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: cloudtolocalllm-certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./scripts/certbot_permissions_hook.sh:/opt/certbot_permissions_hook.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: |
      /bin/sh -c '
        trap exit TERM;
        # Initial certificate request for wildcard - DNS-01 manual challenge (staging)
        echo "Attempting initial staging wildcard certificate acquisition...";
        certbot certonly --manual --preferred-challenges dns --manual-public-ip-logging-ok --email christopher.maltais@gmail.com --agree-tos --no-eff-email --staging -d "*.cloudtolocalllm.online" -d cloudtolocalllm.online --deploy-hook "/opt/certbot_permissions_hook.sh" || echo "Initial certonly command failed or no certs due for renewal.";

        echo "Initial cert attempt/check done. Starting renewal loop (manual intervention will be needed for DNS-01 renewals).";
        while :; do
          # This renew command will likely fail for DNS-01 manual without a pre/post hook and credentials.
          certbot renew --quiet --staging --preferred-challenges dns --deploy-hook "/opt/certbot_permissions_hook.sh";
          sleep 12h & wait $${!};
        done;
      '
    networks:
      - cloudllm-network

networks:
  cloudllm-network:
    driver: bridge

volumes:
  db_data:
    driver: local
  # fusionauth_config:
  #   driver: local 
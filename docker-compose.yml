services:
  # Web application service
  webapp:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    image: cloudtolocalllm-nginx
    container_name: cloudtolocalllm-webapp
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./build/web:/usr/share/nginx/html:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/live:/etc/letsencrypt/live
      - ./certbot/archive:/etc/letsencrypt/archive
      - ./config/nginx/nginx-nonroot.conf:/etc/nginx/nginx.conf
      - ./config/nginx/nginx-webapp-internal.conf:/etc/nginx/conf.d/default.conf
      - ./static_homepage:/usr/share/nginx/landing
      - ./config/docker/entrypoint-with-ssl-fallback.sh:/entrypoint.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Postfix Mail Server for direct email sending
  # WARNING: Ensuring email deliverability with a self-hosted MTA is complex.
  # Requires proper rDNS (PTR), SPF, DKIM, DMARC, and an IP with good reputation.
  # Port 25 outbound must not be blocked by your VPS provider.
  postfix-mail:
    image: boky/postfix:latest
    container_name: cloudtolocalllm-postfix-mail
    restart: always
    environment:
      - "HOSTNAME=mail.cloudtolocalllm.online"
      - "DOMAIN=cloudtolocalllm.online"
      - "ALLOWED_SENDER_DOMAINS=cloudtolocalllm.online"
      - "NETWORK_INTERFACE=eth0"
      - "RELAYHOST="
      - "MYNETWORKS=127.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
      - "DKIM_DOMAINS=cloudtolocalllm.online"
      - "DKIM_SELECTOR=mail"
      - "DKIM_KEY_PATH=/etc/opendkim/keys/cloudtolocalllm.online/mail.private"
      - "DKIM_AUTOGENERATE=true"
      # - "SSL_CERT_PATH=/etc/letsencrypt/live/cloudtolocalllm.online/fullchain.pem"
      # - "SSL_KEY_PATH=/etc/letsencrypt/live/cloudtolocalllm.online/privkey.pem"
    volumes:
      - ./config/dkim:/etc/opendkim/keys/cloudtolocalllm.online:ro
      # - ./certbot/live:/etc/letsencrypt/live:ro
      # - ./certbot/archive:/etc/letsencrypt/archive:ro
    ports:
      - "2500:25"
      - "587:587"  # Submission port for authenticated SMTP
      - "465:465"  # SMTPS port for SSL/TLS
    cap_add:
      - NET_ADMIN

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: cloudtolocalllm-certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/live:/etc/letsencrypt/live
      - ./certbot/archive:/etc/letsencrypt/archive
      - ./scripts/certbot_permissions_hook.sh:/opt/certbot_permissions_hook.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: |
      /bin/sh -c '
        trap exit TERM;
        # Initialize certbot directories with proper permissions
        mkdir -p /var/www/certbot/.well-known/acme-challenge;
        chmod -R 755 /var/www/certbot;
        mkdir -p /etc/letsencrypt/live /etc/letsencrypt/archive;
        chmod -R 755 /etc/letsencrypt;
        echo "Attempting initial certificate acquisition...";
        certbot certonly --webroot -w /var/www/certbot --email admin@cloudtolocalllm.online --agree-tos --no-eff-email -d cloudtolocalllm.online -d app.cloudtolocalllm.online -d docs.cloudtolocalllm.online -d mail.cloudtolocalllm.online --force-renewal --deploy-hook "/opt/certbot_permissions_hook.sh" || echo "Initial certonly command failed or no certs due for renewal.";
        # Change ownership of certificates to nginx user (101:101)
        chown -R 101:101 /etc/letsencrypt/live /etc/letsencrypt/archive;
        echo "Initial cert attempt/check done. Starting renewal loop.";
        while :; do
          certbot renew --quiet --webroot -w /var/www/certbot --deploy-hook "/opt/certbot_permissions_hook.sh";
          # Change ownership after each renewal
          chown -R 101:101 /etc/letsencrypt/live /etc/letsencrypt/archive;
          sleep 12h & wait $${!};
        done;
      '

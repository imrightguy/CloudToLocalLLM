# =============================================================================
# CloudToLocalLLM Flutter Debug Dockerfile
# This builds a debug-enabled version with Flutter DevTools support
# =============================================================================

# =============================================================================
# Stage 1: Flutter Base Image (Cached Layer)
# =============================================================================
FROM debian:bullseye-slim AS flutter-base

# Install system dependencies including Chrome for debugging
RUN apt-get update && apt-get install -y \
    curl \
    git \
    unzip \
    xz-utils \
    zip \
    libglu1-mesa \
    wget \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

# Install Chrome for Flutter web debugging
RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user (cached layer)
RUN groupadd -r fluttergroup && useradd -r -g fluttergroup -m -s /bin/bash flutteruser

# Download and install Flutter SDK (cached layer)
ARG FLUTTER_VERSION=3.29.1
RUN curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz \
    && tar xf flutter_linux_${FLUTTER_VERSION}-stable.tar.xz -C / \
    && rm flutter_linux_${FLUTTER_VERSION}-stable.tar.xz

# Set Flutter permissions and configure git (cached layer)
RUN chown -R flutteruser:fluttergroup /flutter \
    && git config --global --add safe.directory /flutter

# Switch to non-root user and configure Flutter (cached layer)
USER flutteruser
RUN git config --global --add safe.directory /flutter

# Pre-warm Flutter and enable web debugging (cached layer)
RUN /flutter/bin/flutter --version \
    && /flutter/bin/flutter doctor \
    && /flutter/bin/flutter precache --web \
    && /flutter/bin/flutter config --enable-web

# =============================================================================
# Stage 2: Dependencies (Cached when pubspec files don't change)
# =============================================================================
FROM flutter-base AS dependencies

WORKDIR /app
USER root
RUN chown -R flutteruser:fluttergroup /app
USER flutteruser

# Copy dependency files first
COPY --chown=flutteruser:fluttergroup pubspec.yaml pubspec.lock ./

# Install Flutter dependencies
RUN /flutter/bin/flutter pub get

# =============================================================================
# Stage 3: Debug Build (Rebuilds when source code changes)
# =============================================================================
FROM dependencies AS debug-build

# Copy source code
COPY --chown=flutteruser:fluttergroup . .

# Build Flutter web app in debug mode with debugging enabled
RUN /flutter/bin/flutter build web \
    --debug \
    --dart-define=FLUTTER_WEB_USE_SKIA=true \
    --source-maps \
    --no-tree-shake-icons

# =============================================================================
# Stage 4: Debug Nginx Server with Flutter DevTools
# =============================================================================
FROM nginx:alpine AS debug-production

# Install curl and bash for debugging
RUN apk add --no-cache curl bash

# Create nginx user
RUN adduser -D -H -u 101 -s /sbin/nologin nginx || true

# Create necessary directories
RUN mkdir -p \
    /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp \
    /tmp/nginx \
    /etc/letsencrypt/live/cloudtolocalllm.online && \
    chown -R nginx:nginx /var/cache/nginx /tmp/nginx /etc/letsencrypt && \
    chmod -R 700 /var/cache/nginx && \
    chmod -R 755 /tmp/nginx

# Copy debug Nginx configuration
COPY config/nginx/nginx-debug.conf /etc/nginx/conf.d/default.conf
RUN chown -R nginx:nginx /etc/nginx/conf.d && \
    chmod -R 755 /etc/nginx/conf.d

# Copy the debug Flutter web app
COPY --from=debug-build /app/build/web /usr/share/nginx/html
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Copy Flutter SDK for DevTools
COPY --from=debug-build /flutter /flutter
RUN chown -R nginx:nginx /flutter

# Expose ports for web app and debugging
EXPOSE 80 443 8181 8182 3334

# Health check for debug mode
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Start script that runs both Nginx and Flutter DevTools
COPY scripts/debug/start-debug.sh /start-debug.sh
RUN chmod +x /start-debug.sh

CMD ["/start-debug.sh"]

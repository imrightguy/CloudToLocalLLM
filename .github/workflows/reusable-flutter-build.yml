name: Reusable Flutter Build

on:
  workflow_call:
    inputs:
      flutter_version:
        description: 'Flutter version to use'
        required: false
        type: string
        default: '3.32.2'
      platforms:
        description: 'Platforms to build (comma-separated: web,linux,windows)'
        required: false
        type: string
        default: 'web,linux,windows'
      build_mode:
        description: 'Build mode (release, debug, profile)'
        required: false
        type: string
        default: 'release'
      artifact_name_prefix:
        description: 'Prefix for artifact names'
        required: false
        type: string
        default: 'build'
      version:
        description: 'Version string for artifact naming'
        required: true
        type: string
      skip_tests:
        description: 'Skip running tests'
        required: false
        type: boolean
        default: false
      retention_days:
        description: 'Artifact retention days'
        required: false
        type: number
        default: 30

jobs:
  # Code quality and testing
  code-quality:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter_version }}
          cache: true

      - name: Install dependencies
        run: |
          flutter pub get
          flutter pub deps

      - name: Run static analysis
        run: |
          flutter analyze --no-fatal-infos

      - name: Check formatting
        run: |
          flutter format --dry-run --set-exit-if-changed .

      - name: Run tests
        run: |
          flutter test --coverage --reporter=github

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ inputs.version }}
          path: |
            coverage/
            test/
          retention-days: 7

  # Cross-platform builds
  build-flutter:
    runs-on: ${{ matrix.os }}
    needs: [code-quality]
    if: always() && (needs.code-quality.result == 'success' || inputs.skip_tests)
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            enabled: ${{ contains(inputs.platforms, 'linux') }}
          - os: ubuntu-latest
            platform: web
            enabled: ${{ contains(inputs.platforms, 'web') }}
          - os: windows-latest
            platform: windows
            enabled: ${{ contains(inputs.platforms, 'windows') }}
    steps:
      - name: Skip if platform disabled
        if: ${{ !matrix.enabled }}
        run: |
          echo "Platform ${{ matrix.platform }} is disabled, skipping..."
          exit 0

      - name: Checkout repository
        if: ${{ matrix.enabled }}
        uses: actions/checkout@v4

      - name: Setup Flutter
        if: ${{ matrix.enabled }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter_version }}
          cache: true

      - name: Setup Linux dependencies
        if: ${{ matrix.enabled && matrix.platform == 'linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config libgtk-3-dev \
            liblzma-dev libstdc++-12-dev

      - name: Install dependencies
        if: ${{ matrix.enabled }}
        run: flutter pub get

      - name: Build Flutter application
        if: ${{ matrix.enabled }}
        run: |
          case "${{ matrix.platform }}" in
            "web")
              flutter build web --${{ inputs.build_mode }} --no-tree-shake-icons
              ;;
            "linux")
              flutter build linux --${{ inputs.build_mode }}
              ;;
            "windows")
              flutter build windows --${{ inputs.build_mode }}
              ;;
            *)
              echo "Unknown platform: ${{ matrix.platform }}"
              exit 1
              ;;
          esac

      - name: Package build artifacts
        if: ${{ matrix.enabled }}
        run: |
          mkdir -p dist/${{ matrix.platform }}
          
          case "${{ matrix.platform }}" in
            "web")
              tar -czf dist/${{ matrix.platform }}/cloudtolocalllm-web-${{ inputs.version }}.tar.gz -C build/web .
              ;;
            "linux")
              tar -czf dist/${{ matrix.platform }}/cloudtolocalllm-linux-${{ inputs.version }}.tar.gz -C build/linux/x64/release/bundle .
              ;;
            "windows")
              cd build/windows/x64/runner/Release
              7z a -tzip ../../../../../dist/${{ matrix.platform }}/cloudtolocalllm-windows-${{ inputs.version }}.zip *
              cd ../../../../../
              ;;
          esac

      - name: Generate checksums
        if: ${{ matrix.enabled }}
        run: |
          cd dist/${{ matrix.platform }}
          for file in *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done

      - name: Upload build artifacts
        if: ${{ matrix.enabled }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name_prefix }}-${{ matrix.platform }}-${{ inputs.version }}
          path: dist/${{ matrix.platform }}/
          retention-days: ${{ inputs.retention_days }}

  # Build summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, build-flutter]
    if: always()
    steps:
      - name: Create build summary
        run: |
          echo "## 🔨 Flutter Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Flutter Version:** ${{ inputs.flutter_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Mode:** ${{ inputs.build_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Results" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter Builds: ${{ needs.build-flutter.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-flutter.result }}" = "success" ]; then
            echo "✅ All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some builds failed or were skipped" >> $GITHUB_STEP_SUMMARY
          fi

# Contributor: Your Name <your.email@example.com>
# Maintainer: Your Name <your.email@example.com>

pkgname=cloudtolocalllm
_pkgver_full=$(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//') # Extracts e.g., 1.3.3
pkgver=${_pkgver_full}
pkgrel=1
pkgdesc="Manage and run powerful Large Language Models locally, orchestrated via a cloud interface."
arch=('x86_64')
url="https://cloudtolocalllm.online"
license=('custom:LICENSE') # Check your actual LICENSE file and update if (MIT, GPL3, etc.)
depends=(
    'gtk3'
    'alsa-lib'
    'libx11'
    'libxrandr'
    'libxcursor'
    'libxfixes'
    'libxi'
    'mesa' # For GL support
    'fontconfig'
    'pango'
)
makedepends=()
provides=(${pkgname})
conflicts=(${pkgname}-git) # If you plan a -git version later

# The source URL will point to your GitHub release asset
# Example: cloudtolocalllm-linux-x64-1.3.3.tar.gz
_archive_name="${pkgname}-linux-${arch}-${pkgver}.tar.gz"
source=("${pkgname}::https://github.com/thrightguy/CloudToLocalLLM/releases/download/v${pkgver}/${_archive_name}")

sha256sums=('SKIP') # IMPORTANT: Replace SKIP with the actual sha256sum of your tar.gz asset

prepare() {
    # Optional: If your tarball has a top-level directory, cd into it.
    # Example: cd "${srcdir}/${pkgname}-${pkgver}"
    echo "Source directory contents:"
    ls -lah "${srcdir}"
    if [ -d "${srcdir}/bundle" ]; then
        echo "Found bundle directory directly in srcdir."
    elif [ -d "${srcdir}/${_archive_name%.tar.gz}/bundle" ]; then
        echo "Found bundle directory inside extracted archive directory."
        cd "${srcdir}/${_archive_name%.tar.gz}"
    else
        echo "ERROR: Could not find the 'bundle' directory from the Flutter build output in the source tarball."
        echo "Expected at '${srcdir}/bundle' or '${srcdir}/${_archive_name%.tar.gz}/bundle'"
        return 1
    fi
}

package() {
    cd "${srcdir}"
    # Adjust if bundle is nested, based on prepare() logic
    if [ -d "bundle" ]; then
        APP_BUNDLE_DIR="bundle"
    elif [ -d "${_archive_name%.tar.gz}/bundle" ]; then
        APP_BUNDLE_DIR="${_archive_name%.tar.gz}/bundle"
    else
        echo "ERROR: 'bundle' directory not found during package(). This should not happen if prepare() succeeded."
        return 1
    fi 

    # Install application files to /opt/
    install -d "${pkgdir}/opt/${pkgname}"
    cp -r "${APP_BUNDLE_DIR}/." "${pkgdir}/opt/${pkgname}/"

    # Create a symlink in /usr/bin for the executable
    # The executable name is usually the same as pkgname (flutter default)
    install -d "${pkgdir}/usr/bin"
    ln -sfn "/opt/${pkgname}/${pkgname}" "${pkgdir}/usr/bin/${pkgname}"

    # Install .desktop file
    install -Dm644 "/dev/null" "${pkgdir}/usr/share/applications/${pkgname}.desktop" # Create an empty one for now
    # TODO: Create a proper .desktop file and place it in your source, then install it e.g.:
    # install -Dm644 "${srcdir}/${pkgname}.desktop" "${pkgdir}/usr/share/applications/${pkgname}.desktop"
cat << EOF > "${pkgdir}/usr/share/applications/${pkgname}.desktop"
[Desktop Entry]
Name=CloudToLocalLLM
Comment=${pkgdesc}
Exec=${pkgname}
Icon=${pkgname}
Terminal=false
Type=Application
Categories=Utility;Network;
StartupWMClass=cloudtolocalllm
EOF

    # Install icons (assuming you have them in your source tarball in an 'icons' dir)
    # Example: icons/hicolor/128x128/apps/cloudtolocalllm.png
    # install -Dm644 "${srcdir}/icons/hicolor/128x128/apps/${pkgname}.png" "${pkgdir}/usr/share/icons/hicolor/128x128/apps/${pkgname}.png"
    # install -Dm644 "${srcdir}/icons/hicolor/scalable/apps/${pkgname}.svg" "${pkgdir}/usr/share/icons/hicolor/scalable/apps/${pkgname}.svg"
    # For now, creating a placeholder for the main executable to be used as an icon source by some DEs if no specific icon is found by theme.
    # A proper icon is highly recommended.
    install -d "${pkgdir}/usr/share/pixmaps"
    ln -sfn "/opt/${pkgname}/${pkgname}" "${pkgdir}/usr/share/pixmaps/${pkgname}"


    # Install license file
    install -Dm644 "LICENSE" "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

# Notes for AUR submission:
# 1. Ensure your LICENSE file is present in the project root when you create the tarball.
# 2. Create a .desktop file (e.g., cloudtolocalllm.desktop) in your project root and update the PKGBUILD to install it.
#    Example .desktop content is generated above.
# 3. Add application icons (e.g., PNGs, SVGs) to your project, include them in the tarball, and update PKGBUILD to install them.
#    Paths like /usr/share/icons/hicolor/<size>/apps/<pkgname>.png are standard.
# 4. After creating your release tarball (e.g., cloudtolocalllm-linux-x64-1.3.3.tar.gz containing the `bundle` directory):
#    a. Calculate its sha256sum: `sha256sum cloudtolocalllm-linux-x64-1.3.3.tar.gz`
#    b. Replace 'SKIP' in the `sha256sums` array with the actual sum.
# 5. Test the PKGBUILD locally: `makepkg -si` in the directory containing the PKGBUILD.
# 6. Once satisfied, you can create an AUR account and submit your package.
#    This involves creating a new Git repository on aur.archlinux.org (e.g., cloudtolocalllm.git),
#    adding your PKGBUILD (and any .desktop or .install files) to it, and pushing. 
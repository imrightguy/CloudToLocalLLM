# Add WebAssembly MIME type if not already in mime.types
types {
    application/wasm wasm;
}

# log_format main '$remote_addr - $remote_user [$time_local] "$request" '$status $body_bytes_sent "$http_referer" '$http_user_agent" "$http_x_forwarded_for"';
access_log /var/log/nginx/access.log main;

# Security headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header X-Content-Type-Options "nosniff" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;
add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval' 'wasm-unsafe-eval'" always;
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

# DNS resolution for proxy_pass with variables or service discovery
resolver 127.0.0.11 valid=30s;
resolver_timeout 10s;

# HTTP server for main domain and app subdomain (excluding www)
server {
    listen 80;
    server_name cloudtolocalllm.online app.cloudtolocalllm.online;

    # Handle Let's Encrypt ACME challenge
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        default_type "text/plain";
        try_files $uri =404;
    }

    # Internal health check for webapp itself
    location = /health_internal {
        return 200 'OK_WEBAPP_INTERNAL';
        add_header Content-Type text/plain;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTP server for www.cloudtolocalllm.online (redirects to non-www HTTPS)
server {
    listen 80;
    server_name www.cloudtolocalllm.online;

    location / {
        return 301 https://cloudtolocalllm.online$request_uri;
    }
}

# HTTPS server for main domain (cloudtolocalllm.online) and app.cloudtolocalllm.online
server {
    listen 443 ssl default_server;
    server_name cloudtolocalllm.online app.cloudtolocalllm.online;

    # SSL configuration - Let's Encrypt certificate
    ssl_certificate /etc/letsencrypt/live/cloudtolocalllm.online/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloudtolocalllm.online/privkey.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Root for the Flutter web application
    root /usr/share/nginx/html;
    index index.html index.htm;

    # Handle SPA routing for the Flutter app
    location / {
        try_files $uri $uri/ /index.html;
    }
}

# HTTPS server for www.cloudtolocalllm.online (redirects to non-www HTTPS)
server {
    listen 443 ssl;
    server_name www.cloudtolocalllm.online;

    # SSL configuration - Let's Encrypt certificate
    ssl_certificate /etc/letsencrypt/live/cloudtolocalllm.online/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloudtolocalllm.online/privkey.pem;

    # Minimal SSL params for redirect server
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL_WWW:10m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    location / {
        return 301 https://cloudtolocalllm.online$request_uri;
    }
}

# Enable gzip compression
gzip on;
gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

# Cache static assets
location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
    expires 1y;
    add_header Cache-Control "public, no-transform";
} 